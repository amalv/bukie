import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import BookOpen from "lucide-react/dist/esm/icons/book-open.js";
import { cookies } from "next/headers";
import Script from "next/script";
import { Container } from "@/design/layout/grid";
import { darkThemeClass, lightThemeClass } from "@/design/tokens.css";
import { ThemeToggle } from "../design/theme/ThemeToggle";
import * as headerStyles from "./header.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Server: read cookie preference ('light' | 'dark')
  const cookieStore = await cookies();
  const pref = cookieStore.get("theme")?.value as "light" | "dark" | undefined;
  const themeClass = pref === "dark" ? darkThemeClass : lightThemeClass;
  const initialThemeAttr = pref ?? "system";
  return (
    <html lang="en" data-theme={initialThemeAttr}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${themeClass}`}
      >
        <Script id="theme-init" strategy="beforeInteractive">{`
          (function initTheme(){
            try {
              // Read theme cookie if present
              var match = document.cookie.match(/(?:^|; )theme=([^;]+)/);
              var cookiePref = match ? decodeURIComponent(match[1]) : null;
              // Detect system preference
              var prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
              // Choose theme: cookie wins, else system
              var theme = cookiePref || (prefersDark ? 'dark' : 'light');
              document.documentElement.setAttribute('data-theme', theme);
            } catch (_) {
              // noop
            }
          })();
          `}</Script>
        <header className={headerStyles.header}>
          <Container>
            <div className={headerStyles.inner}>
              <div className={headerStyles.brand}>
                <BookOpen className={headerStyles.brandIcon} aria-hidden />
                Bukie
              </div>
              <ThemeToggle />
            </div>
          </Container>
        </header>
        {/* offset for fixed header */}
        <div className={headerStyles.offset} aria-hidden />
        {children}
        <footer className={headerStyles.footer}>
          <Container>
            <div className={headerStyles.footerInner}>
              <BookOpen className={headerStyles.brandIcon} aria-hidden />
              Bukie
            </div>
          </Container>
        </footer>
      </body>
    </html>
  );
}
